#!/bin/bash

# opencode-sync TUI - Terminal User Interface for profile management
# Requires: fzf, git

set -e

SYNC_DIR="$HOME/.local/share/opencode-sync"
SYNC_SCRIPT="$SYNC_DIR/sync/sync.sh"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Check dependencies
check_deps() {
    command -v fzf >/dev/null 2>&1 || { echo "fzf is required but not installed. Install with: sudo apt install fzf"; exit 1; }
    [ -f "$SYNC_SCRIPT" ] || { echo "Sync script not found at $SYNC_SCRIPT"; exit 1; }
}

# Display header
show_header() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                    ${PURPLE}opencode-sync TUI${CYAN}                        ║${NC}"
    echo -e "${CYAN}║              Manage your opencode profiles                   ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Show current status
show_status() {
    local current_profile=$("$SYNC_SCRIPT" current | cut -d: -f2 | xargs)
    local git_status=""
    
    if [ -d "$SYNC_DIR/.git" ]; then
        cd "$SYNC_DIR"
        if git diff --quiet && git diff --cached --quiet; then
            git_status="${GREEN}Clean${NC}"
        else
            git_status="${YELLOW}Modified${NC}"
        fi
    else
        git_status="${RED}Not initialized${NC}"
    fi
    
    echo -e "${BLUE}Current Profile:${NC} ${GREEN}$current_profile${NC}"
    echo -e "${BLUE}Git Status:${NC} $git_status"
    echo ""
}

# Main menu
show_menu() {
    echo -e "${YELLOW}Choose an action:${NC}"
    echo ""
    echo "1. Switch Profile"
    echo "2. Create Profile"
    echo "3. Sync with Remote"
    echo "4. Deploy Current Profile"
    echo "5. View Profile Details"
    echo "6. Initialize Git Repository"
    echo "7. Open Profile Directory"
    echo "8. Exit"
    echo ""
}

# Profile selection with fzf
select_profile() {
    local profiles=()
    local current_profile=$("$SYNC_SCRIPT" current | cut -d: -f2 | xargs)
    
    for profile_dir in "$SYNC_DIR/profiles"/*; do
        if [ -d "$profile_dir" ]; then
            profile_name=$(basename "$profile_dir")
            if [ "$profile_name" = "$current_profile" ]; then
                profiles+=("$profile_name (current)")
            else
                profiles+=("$profile_name")
            fi
        fi
    done
    
    if [ ${#profiles[@]} -eq 0 ]; then
        echo "No profiles found"
        return 1
    fi
    
    printf '%s\n' "${profiles[@]}" | fzf --prompt="Select profile: " --height=10 --border
}

# Switch profile
switch_profile() {
    echo -e "${BLUE}Available profiles:${NC}"
    echo ""
    
    local selected=$(select_profile)
    if [ -n "$selected" ]; then
        local profile_name=$(echo "$selected" | sed 's/ (current)//')
        echo ""
        echo -e "${YELLOW}Switching to profile: $profile_name${NC}"
        "$SYNC_SCRIPT" switch "$profile_name"
        echo ""
        read -p "Press Enter to continue..."
    fi
}

# Create new profile
create_profile() {
    echo -e "${BLUE}Create new profile${NC}"
    echo ""
    
    read -p "Profile name: " profile_name
    if [ -z "$profile_name" ]; then
        echo "Profile name cannot be empty"
        read -p "Press Enter to continue..."
        return
    fi
    
    echo ""
    echo "Available templates:"
    echo "1. default"
    echo "2. work"
    echo "3. personal"
    echo ""
    read -p "Choose template (1-3) or press Enter for default: " template_choice
    
    case "$template_choice" in
        2) template="work" ;;
        3) template="personal" ;;
        *) template="default" ;;
    esac
    
    echo ""
    echo -e "${YELLOW}Creating profile: $profile_name (from $template)${NC}"
    "$SYNC_SCRIPT" create "$profile_name" "$template"
    echo ""
    read -p "Press Enter to continue..."
}

# Sync with remote
sync_remote() {
    echo -e "${BLUE}Syncing with remote repository...${NC}"
    echo ""
    
    if [ -z "${OPENCODE_SYNC_REPO:-}" ]; then
        echo -e "${YELLOW}No remote repository configured.${NC}"
        read -p "Enter repository URL (or press Enter to skip): " repo_url
        if [ -n "$repo_url" ]; then
            export OPENCODE_SYNC_REPO="$repo_url"
            echo "export OPENCODE_SYNC_REPO=\"$repo_url\"" >> ~/.bashrc
            echo -e "${GREEN}Repository URL saved to ~/.bashrc${NC}"
        else
            echo "Skipping sync"
            read -p "Press Enter to continue..."
            return
        fi
    fi
    
    "$SYNC_SCRIPT" sync
    echo ""
    read -p "Press Enter to continue..."
}

# View profile details
view_profile_details() {
    local selected=$(select_profile)
    if [ -n "$selected" ]; then
        local profile_name=$(echo "$selected" | sed 's/ (current)//')
        local profile_dir="$SYNC_DIR/profiles/$profile_name"
        
        clear
        show_header
        echo -e "${BLUE}Profile Details: ${GREEN}$profile_name${NC}"
        echo ""
        
        if [ -f "$profile_dir/config/opencode.json" ]; then
            echo -e "${YELLOW}Configuration:${NC}"
            cat "$profile_dir/config/opencode.json" | head -20
            echo ""
        fi
        
        if [ -d "$profile_dir/config/agents" ]; then
            echo -e "${YELLOW}Agents:${NC}"
            ls -la "$profile_dir/config/agents/" 2>/dev/null || echo "No agents found"
            echo ""
        fi
        
        echo -e "${YELLOW}Directory structure:${NC}"
        tree "$profile_dir" 2>/dev/null || find "$profile_dir" -type f | head -10
        echo ""
        
        read -p "Press Enter to continue..."
    fi
}

# Initialize git repository
init_git() {
    echo -e "${BLUE}Initializing git repository...${NC}"
    echo ""
    
    "$SYNC_SCRIPT" init
    echo ""
    read -p "Press Enter to continue..."
}

# Open profile directory
open_profile_dir() {
    local selected=$(select_profile)
    if [ -n "$selected" ]; then
        local profile_name=$(echo "$selected" | sed 's/ (current)//')
        local profile_dir="$SYNC_DIR/profiles/$profile_name"
        
        echo -e "${BLUE}Opening profile directory: $profile_dir${NC}"
        
        if command -v code >/dev/null 2>&1; then
            code "$profile_dir"
        elif command -v nvim >/dev/null 2>&1; then
            nvim "$profile_dir"
        else
            echo "Opening in file manager..."
            xdg-open "$profile_dir" 2>/dev/null || open "$profile_dir" 2>/dev/null || echo "Please open: $profile_dir"
        fi
        
        read -p "Press Enter to continue..."
    fi
}

# Main loop
main() {
    check_deps
    
    while true; do
        show_header
        show_status
        show_menu
        
        read -p "Enter your choice (1-8): " choice
        echo ""
        
        case "$choice" in
            1) switch_profile ;;
            2) create_profile ;;
            3) sync_remote ;;
            4) 
                echo -e "${BLUE}Deploying current profile...${NC}"
                "$SYNC_SCRIPT" deploy
                echo ""
                read -p "Press Enter to continue..."
                ;;
            5) view_profile_details ;;
            6) init_git ;;
            7) open_profile_dir ;;
            8) 
                echo -e "${GREEN}Goodbye!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid choice. Please try again.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Handle command line arguments for specific functions
if [ $# -gt 0 ]; then
    case "$1" in
        "create_profile") create_profile ;;
        "sync_remote") sync_remote ;;
        "view_profile_details") view_profile_details ;;
        "open_profile_dir") open_profile_dir ;;
        *) main ;;
    esac
else
    main
fi